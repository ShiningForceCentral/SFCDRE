//
// +-------------------------------------------------------------------------+
// |     This file is generated by The Interactive Disassembler (IDA)        |
// |     Copyright (c) 2007 by DataRescue sa/nv, <ida@datarescue.com>        |
// | Licensed to: Mach EDV Dienstleistungen, Jan Mach, 1 user, adv, 11/2007  |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void) {
        GenInfo();              // various settings
        Segments();             // segmentation
        Enums();                // enumerations
        Structures();           // structure types
        Bytes();                // individual bytes (code,data)
        Functions();            // function definitions
        SegRegs();              // segment register values
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("68000");
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0X0);
	;
	SegCreate(0X0,0X7FFFF,0X0,1,0,2);
	SegRename(0X0,"SUBCPUPRGRAM");
	SegClass (0X0,"");
	SegCreate(0X80000,0XBFFFF,0X0,1,0,2);
	SegRename(0X80000,"WORDRAM2MBMODE");
	SegClass (0X80000,"");
	SegCreate(0XC0000,0XDFFFF,0X0,1,0,2);
	SegRename(0XC0000,"WORDRAM1MBMODE");
	SegClass (0XC0000,"");
	SegCreate(0XFE0000,0XFE3FFF,0X0,0,0,2);
	SegRename(0XFE0000,"BBRAM");
	SegClass (0XFE0000,"");
	SegCreate(0XFF0000,0XFF3FFF,0X0,0,0,2);
	SegRename(0XFF0000,"PCM");
	SegClass (0XFF0000,"");
	SegCreate(0XFF8000,0XFF80FF,0X0,0,0,2);
	SegRename(0XFF8000,"GATEARRAY");
	SegClass (0XFF8000,"");
	LowVoids(0x0);
	HighVoids(0xFF80FF);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X0,	0,	"; File Name   : E:\\SEGADEV\\GITHUB\\SFCDRE\\disasm\\sector00002-00016-subcpu-initprg.bin");
	ExtLinA		(0X0,	1,	"; Format      : Binary file");
	ExtLinA		(0X0,	2,	"; Base Address: 0000h Range: 0000h - 7000h Loaded length: 7000h");
	MakeStr		(0X0,	0XB);
	MakeName	(0X0,	"aMainCos");
	MakeWord	(0XC);
	MakeWord	(0XE);
	MakeDword	(0X10);
	MakeDword	(0X14);
	MakeDword	(0X18);
	MakeDword	(0X1C);
	MakeWord	(0X20);
	MakeWord	(0X22);
	MakeWord	(0X24);
	MakeWord	(0X26);
	MakeWord	(0X28);
	MakeCode	(0X2A);
	MakeCode	(0X30);
	MakeCode	(0X3C);
	MakeCode	(0X42);
	MakeCode	(x=0X46);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X70);
	MakeCode	(0X92);
	MakeCode	(0XB2);
	MakeCode	(0XD2);
	MakeCode	(0XF2);
	MakeCode	(0X12C);
	MakeCode	(0X16C);
	MakeCode	(0X1A2);
	MakeCode	(0X1EA);
	MakeCode	(0X228);
	MakeCode	(0X27C);
	MakeCode	(0X2D8);
	MakeCode	(0X304);
	MakeCode	(0X356);
	MakeCode	(0X36A);
	MakeCode	(x=0X392);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X398);
	OpOff		(x,	1,	0XFF0000);
	OpOff		(x,	129,	0XFF0000);
	MakeCode	(x=0X39E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3F2);
	MakeCode	(x=0X40C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X418);
	MakeCode	(x=0X41C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X42A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X438);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1F72);
	MakeCode	(x=0X1F94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1F9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2140);
	MakeCode	(x=0X2144);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2148);
	OpStkvar	(x,	0);
	MakeCode	(x=0X214C);
	OpStkvar	(x,	0);
	MakeCode	(0X216E);
	MakeCode	(0X21AE);
	MakeCode	(x=0X21B8);
	OpSign		(x,	1);
	MakeCode	(x=0X21BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X21C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X21DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21E2);
	OpStkvar	(x,	0);
	MakeCode	(0X2204);
	MakeCode	(x=0X221E);
	OpStkvar	(x,	0);
	MakeCode	(0X2226);
	MakeCode	(x=0X222A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X222E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2232);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2240);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2264);
	MakeCode	(0X2278);
	MakeCode	(x=0X2290);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22A0);
	OpStkvar	(x,	0);
	MakeByte	(0X603E);
	MakeCode	(0X60F2);
	MakeWord	(0X82B0);
	MakeByte	(0XFF0011);
	MakeByte	(0XFF8003);
	MakeByte	(0XFF800E);
	MakeByte	(0XFF800F);
	MakeWord	(0XFF801A);
	MakeWord	(0XFF801C);
	MakeByte	(0XFF801E);
	MakeWord	(0XFF8020);
	MakeWord	(0XFF8022);
	MakeWord	(0XFF8024);
	MakeWord	(0XFF8026);
	MakeWord	(0XFF8028);
	MakeWord	(0XFF802A);
	MakeWord	(0XFF802C);
	MakeWord	(0XFF802E);
}

static Functions_0(void) {

	MakeFunction    (0X12C,0X168);
	SetFunctionFlags(0X12C,0x0);
	MakeFunction    (0X16C,0X1A2);
	SetFunctionFlags(0X16C,0x0);
	MakeFunction    (0X1A2,0X1E6);
	SetFunctionFlags(0X1A2,0x0);
	MakeFunction    (0X1EA,0X228);
	SetFunctionFlags(0X1EA,0x0);
	MakeFunction    (0X418,0X438);
	SetFunctionFlags(0X418,0x0);
	MakeFunction    (0X1F72,0X1FB2);
	SetFunctionFlags(0X1F72,0x0);
	MakeFunction    (0X2140,0X21B8);
	SetFunctionFlags(0X2140,0x0);
	MakeFrame(0X2140, 0X0, 0, 0X0);
	MakeFunction    (0X21B8,0X2226);
	SetFunctionFlags(0X21B8,0x10);
	MakeFrame(0X21B8, 0X10, 4, 0X0);
	MakeFunction    (0X2226,0X22B0);
	SetFunctionFlags(0X2226,0x0);
	MakeFrame(0X2226, 0X0, 0, 0X0);
	MakeFunction    (0X60F2,0X622A);
	SetFunctionFlags(0X60F2,0x0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
}

// End of file.
