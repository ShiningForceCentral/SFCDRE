//
// +-------------------------------------------------------------------------+
// |     This file is generated by The Interactive Disassembler (IDA)        |
// |     Copyright (c) 2007 by DataRescue sa/nv, <ida@datarescue.com>        |
// | Licensed to: Mach EDV Dienstleistungen, Jan Mach, 1 user, adv, 11/2007  |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void) {
        GenInfo();              // various settings
        Segments();             // segmentation
        Enums();                // enumerations
        Structures();           // structure types
        Bytes();                // individual bytes (code,data)
        Functions();            // function definitions
        SegRegs();              // segment register values
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("68000");
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0X0);
	;
	SegCreate(0X0,0X1FFFF,0X0,1,0,2);
	SegRename(0X0,"BIOSROM");
	SegClass (0X0,"");
	SegCreate(0X20000,0X3FFFF,0X0,1,0,2);
	SegRename(0X20000,"SUBPRGRAM");
	SegClass (0X20000,"");
	SegCreate(0X200000,0X23FFFF,0X0,1,0,2);
	SegRename(0X200000,"WORDRAM");
	SegClass (0X200000,"");
	SegCreate(0XA00000,0XA0FFFF,0X0,0,0,2);
	SegRename(0XA00000,"Z80");
	SegClass (0XA00000,"");
	SegCreate(0XA10000,0XA10FFF,0X0,0,0,2);
	SegRename(0XA10000,"IO");
	SegClass (0XA10000,"");
	SegCreate(0XA11000,0XA11FFF,0X0,0,0,2);
	SegRename(0XA11000,"CONTROL");
	SegClass (0XA11000,"");
	SegCreate(0XA12000,0XA120FF,0X0,0,0,2);
	SegRename(0XA12000,"GATEARRAY");
	SegClass (0XA12000,"");
	SegCreate(0XC00000,0XDFFFFF,0X0,1,0,2);
	SegRename(0XC00000,"VDP");
	SegClass (0XC00000,"");
	SegCreate(0XFF0000,0XFFFFFF,0X0,0,0,2);
	SegRename(0XFF0000,"RAM");
	SegClass (0XFF0000,"");
	LowVoids(0x0);
	HighVoids(0xFFFFFF);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	MakeRptCmt	(0XA10001,	"7-MODE  (R)  0: Domestic Model\n             1: Overseas Model\n6-VMOD  (R)  0: NTSC CPU clock 7.67 MHz\n             1: PAL CPU clock 7.60 MHz\n5-DISK  (R)  0: FDD unit connected\n             1: FDD unit not connected\n4-RSV   (R)  Currently not used\n3-0 VER (R)  MEGA DRIVE version ($0 to $F)");
	MakeWord	(0XA10001);
	MakeName	(0XA10001,	"HW_Info");
	MakeRptCmt	(0XA10003,	"PD7 (RW)\nPD6 (RW) TH\nPD5 (RW) TR\nPD4 (RW) TL\nPD3 (RW) RIGHT\nPD2 (RW) LEFT\nPD1 (RW) DOWN\nPDO (RW) UP\n");
	MakeWord	(0XA10003);
	MakeName	(0XA10003,	"DATA1");
	MakeWord	(0XA10005);
	MakeName	(0XA10005,	"DATA2");
	MakeWord	(0XA10007);
	MakeName	(0XA10007,	"DATA3");
	MakeRptCmt	(0XA10009,	"INT (RW) 0: TH-INT PROHIBITED\n         1: TH-INT ALLOWED\nPC6 (RW) 0: PD6 INPUT MODE\n         1: OUTPUT MODE\nPC5 (RW) 0: PD5 INPUT MODE\n         1: OUTPUT MODE\nPC4 (RW) 0: PD4 INPUT MODE\n         1: OUTPUT MODE\nPC3 (RW) 0: PD3 INPUT MODE\n         1: OUTPUT MODE\nPC2 (RW) 0: PD2 INPUT MODE\n         1: OUTPUT MODE\nPC1 (RW) 0: PD1 INPUT MODE\n         1: OUTPUT MODE\nPCO (RW) 0: PDO INPUT MODE\n         1: OUTPUT MODE");
	MakeWord	(0XA10009);
	MakeName	(0XA10009,	"CTRL1");
	MakeWord	(0XA1000B);
	MakeName	(0XA1000B,	"CTRL2");
	MakeWord	(0XA1000D);
	MakeName	(0XA1000D,	"CTRL3");
	MakeWord	(0XA1000F);
	MakeName	(0XA1000F,	"TxDATA1");
	MakeWord	(0XA10011);
	MakeName	(0XA10011,	"RxDATA1");
	MakeWord	(0XA10013);
	MakeName	(0XA10013,	"SCTRL1");
	MakeWord	(0XA10015);
	MakeName	(0XA10015,	"TxDATA2");
	MakeWord	(0XA10017);
	MakeName	(0XA10017,	"RxDATA2");
	MakeWord	(0XA10019);
	MakeName	(0XA10019,	"SCTRL2");
	MakeWord	(0XA1001B);
	MakeName	(0XA1001B,	"TxDATA3");
	MakeWord	(0XA1001D);
	MakeName	(0XA1001D,	"RxDATA3");
	MakeWord	(0XA1001F);
	MakeName	(0XA1001F,	"SCTRL3");
	MakeRptCmt	(0XA11000,	"D8 ( W)   0: ROM MODE\n          1: D-RAM MODE");
	MakeWord	(0XA11000);
	MakeName	(0XA11000,	"MemMode");
	MakeRptCmt	(0XA11100,	"D8 ( W)   0: BUSREQ CANCEL\n          1: BUSREQ REQUEST\n   ( R)   0: CPU FUNCTION STOP ACCESSIBLE\n          1: FUNCTIONING");
	MakeWord	(0XA11100);
	MakeName	(0XA11100,	"Z80BusReq");
	MakeRptCmt	(0XA11200,	"D8 ( W)   0: RESET REQUEST\n          1: RESET CANCEL");
	MakeWord	(0XA11200);
	MakeName	(0XA11200,	"Z80BusReset");
	MakeByte	(0XA12003);
	MakeName	(0XA12003,	"REG_MEMORY_MODE");
	MakeByte	(0XA1201E);
	MakeByte	(0XA1202E);
	MakeDword	(0XC00000);
	MakeName	(0XC00000,	"VDP_Data");
	MakeDword	(0XC00004);
	MakeName	(0XC00004,	"VDP_Control");
	MakeDword	(0XC00008);
	MakeName	(0XC00008,	"HV_Counter");
	MakeByte	(0XC00011);
	MakeName	(0XC00011,	"PSG");
	MakeCode	(0XFF0000);
	MakeName	(0XFF0000,	"MAIN_CPU_INIT_PRG");
	MakeRptCmt	(0XFF0014,	"give Word RAM to SUB-CPU");
	MakeCode	(0XFF0044);
	MakeCode	(0XFF0090);
}

static Functions_0(void) {

	MakeFunction    (0XFF0000,0XFF0044);
	SetFunctionFlags(0XFF0000,0x0);
	MakeFunction    (0XFF0044,0XFF0090);
	SetFunctionFlags(0XFF0044,0x0);
	MakeFunction    (0XFF0090,0XFF00E2);
	SetFunctionFlags(0XFF0090,0x0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
}

// End of file.
